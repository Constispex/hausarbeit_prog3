plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}
group 'de.prog'
version '1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
    log4jVersion = '2.17.2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


application {
    mainModule = "de.prog.client"
    mainClass = "de.prog.client.Main"
}


task fatJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': application.mainClass

        )

    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.getFiles().collect { it.isDirectory() ? it : zipTree(it) }
    }


    archiveFileName.set('Client-1.0.jar')
}

dependencies {
    implementation("jakarta.ws.rs:jakarta.ws.rs-api:3.1.0") {
    } // Provides activation-api and optional xml-api

    implementation 'org.json:json:20230227'


    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Compile jackson.core annotations, databind 2.11.3 and jackson.module jaxb annotations 2.11.3
    implementation(group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '3.0.1') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }

    implementation "com.fasterxml.jackson.core:jackson-core:2.14.0"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.0"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.14.0"


    implementation "jakarta.inject:jakarta.inject-api:2.0.1" // Jersey 3.0.1 requires this


    implementation("jakarta.xml.bind:jakarta.xml.bind-api:3.0.1") {
        exclude group: 'jakarta.activation', module: 'jakarta.activation-api'
    }
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.3"


    implementation 'org.glassfish.hk2:hk2-locator:3.0.4' // Jersey 3.0.1 requires this
    implementation 'org.glassfish.jersey.core:jersey-common:3.1.3' // Jersey 3.0.1 requires this

    implementation "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
    implementation "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.3"

    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    implementation 'org.openjfx:javafx-controls:17'
    implementation 'org.openjfx:javafx-fxml:17'
    implementation 'org.openjfx:javafx-graphics:17'

    implementation project(':Common')
}


jlink {
    addOptions('--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages')

    mergedModule {
        additive = true
        requires 'com.fasterxml.jackson.core'
        requires 'com.fasterxml.jackson.databind'
    }

    launcher {
        name = 'DbmsClient'
    }

    forceMerge('log4j-api', 'log4j-core')


    jpackage {
        imageName = 'DbmsClient'
        installerName = 'DbmsClientInstaller'

        skipInstaller = false
        installerOptions += [
                '--verbose', '--app-version', version,
        ]
        def ostype = org.gradle.internal.os.OperatingSystem.current()
        if (ostype.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            imageOptions += ['--win-console']
            installerType = 'msi'
        } else if (ostype.linux) {
            installerType = 'deb'
        } else if (ostype.macOsX) {
            installerType = 'dmg'
        }
    }
}


tasks.jlink.doLast {
    copy { // Copy FXML and log4j configuration files
        from('src/main/resources')
        into("${buildDir}/image/bin")
    }
    copy { // Copy log4j library files
        from("${buildDir}/jlinkbase/jlinkjars/log4j-*-${log4jVersion}.jar")
        into("${buildDir}/image/lib")
    }
}


javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

repositories {
    mavenCentral()
}